buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url 'https://maven.parchmentmc.org' }
        maven { url 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group =  "${mod_author}.${modid}"
archivesBaseName = modid
version = "${minecraft_version}-${mod_version}-forge"

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${modid}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${modid}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${modid}.${project.name}.main"
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        name "CurseMaven"
        url "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly project(":common")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")

    implementation fg.deobf("curse.maven:reliquary-v1-3-241319:${reliquary_file_id}")
}

mixin {
    add sourceSets.main, "${modid}.mixins.refmap.json"
    config "${modid}.mixins.json"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand  'mod_name': mod_name, 'mod_version': mod_version, 'mod_description': mod_description,
                'mod_author': mod_author, 'mod_license': mod_license,
                'minecraft_version': minecraft_version, 'minecraft_version_range': minecraft_version_range,
                'fml_min': fml_min, 'forge_version': forge_version,
                'botania_version': botania_version,
                'reliquary_version': reliquary_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    duplicatesStrategy 'include'
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')